#include <utility>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <iostream>

//#include "Huffman.h"

using namespace std;

class HuffmanTreeNode
{
public:

	HuffmanTreeNode (int v, char c)
	{
		//cerr << "H(i,c) created " << (void*) this << endl;
		_value = v;
		_char = c;
		isLeaf = true;
	};
	HuffmanTreeNode (int c1, int c2, int sum )
	{
		_children = make_pair(c1, c2);
		isLeaf = false;
		_value = sum;
		cout << " new node " << _value << endl;
	};
	~HuffmanTreeNode() {
		//cerr << "H deleted" << (void*) this << endl;
	};

	int getValue_setParent ( int p )
	{
		_parent = p;
		return _value;
	};
	int getValue() { return _value; };
	char getChar() const { return _char; };
	int Left() const { return _children.first; };
	int Right() const { return _children.second; };
	bool isLeaf;

private:
	pair<int, int> _children;
	int _parent;
	int _value;
	char _char;
};

class HuffmanCoding
{
public:
		
	void encodeTree ( int n, string code)
	{
		if ( _nodes[n].isLeaf )
			_code[_nodes[n].getChar()] = code;
		else
		{
			encodeTree( _nodes[n].Left(), code + '0');
			encodeTree( _nodes[n].Right(), code + '1');
		}
	}
	static bool compareNodes (HuffmanTreeNode n1, HuffmanTreeNode n2 ) { return n1.getValue() < n2.getValue(); };
	void formTree ()
	{
		for ( map<char, int>::iterator i = _freq.begin(); i != _freq.end() ; i++)	// initialize nodes
		{
			HuffmanTreeNode* newNode = new HuffmanTreeNode(i->second, i->first);
			_nodes.push_back( *newNode );
		}
		sort(_nodes.begin(), _nodes.end(), compareNodes);

		vector<int> topNodesIdx;
		for (unsigned i = 0; i < _nodes.size(); i++)
			topNodesIdx.push_back(i);
		while ( topNodesIdx.size() > 1 ) // Huffman's method
		{	//new node
			int sum = _nodes[topNodesIdx[0]].getValue_setParent(_nodes.size())
				+ _nodes[topNodesIdx[1]].getValue_setParent(_nodes.size());
			cout << "L:" << _nodes[topNodesIdx[0]].getValue() << " R: " << _nodes[topNodesIdx[1]].getValue()<<endl;
			HuffmanTreeNode* newNode = new HuffmanTreeNode( topNodesIdx[0], topNodesIdx[1], sum );
			_nodes.push_back( *newNode );
			topNodesIdx.erase( topNodesIdx.begin(), topNodesIdx.begin()+2 );
			if (!topNodesIdx.empty())	// sort top level nodes
			{
				for (unsigned i = 0; i < topNodesIdx.size(); i++)
					if (newNode->getValue() <= _nodes[topNodesIdx[i]].getValue())
					{
						topNodesIdx.insert(topNodesIdx.begin() + i, (int)_nodes.size() - 1);
						break;
					}
					else if (i == topNodesIdx.size() - 1)
					{
						topNodesIdx.push_back((int)_nodes.size() - 1);
						break;
					}
			}
			else
			{
				_topNode = (int)_nodes.size() - 1;
				break;
			}
		}
		encodeTree( _topNode, "");
	};
	
	void countCharFreq ( string str)
	{
		for( unsigned i = 0; i < str.length(); i++)
			_freq[str[i]]++;
	};

	void HuffmanEncode (string s)
	{
		cout << "start enocding \"" << s <<"\""<< endl;
		cout << "size: " << s.length()*8 <<" bits" <<endl;
		countCharFreq(s);
		cout << "ferq:" << endl;
		for (map<char, int>::iterator i = _freq.begin(); i != _freq.end(); i++)
			cout << "char: " << i->first << ", count: " << i->second << endl;
		formTree();
		cout<<"code:"<<endl;
		for ( map<char, string>::iterator i = _code.begin(); i != _code.end() ; i++)
			cout<< i->first <<": "<< i->second <<endl;
		string str = s;
		string output = "";
		while ( str != "")
		{
			output += _code[str[0]];
			str.erase( 0, 1);
		}
		cout << "output: " << endl << output << endl;
		cout << "decode:" << endl;
		HuffmanDecode(output);
	};
	void HuffmanDecode ( string s )
	{
		string str = s;
		string output = "";
		int idx = _topNode;
		while (str != "")
		{
			if (str[0] == '0')
				idx = _nodes[idx].Left();
			else if (str[0] == '1')
				idx = _nodes[idx].Right();
			if (_nodes[idx].isLeaf)
			{
				output += _nodes[idx].getChar();
				idx = _topNode;
			}
			str.erase(0, 1);
		}
		cout << output<<endl;
		cout << "size: " << output.length() << " bits" << endl;
	}

private:
	int _topNode;
	vector<HuffmanTreeNode> _nodes;
	map<char, int> _freq;
	map<char, string> _code;
};


int main()
{
	// read write
	cout << "hello:"<<endl;
	HuffmanCoding* huffman = new HuffmanCoding();
	//string file = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbccccccccccccddddddddddddddddeeeeeeeeefffff";
    string file;
    cin >> file;
	huffman->HuffmanEncode(file);
	//system("pause");
}
